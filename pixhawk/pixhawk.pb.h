// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pixhawk.proto

#ifndef PROTOBUF_pixhawk_2eproto__INCLUDED
#define PROTOBUF_pixhawk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace px {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pixhawk_2eproto();
void protobuf_AssignDesc_pixhawk_2eproto();
void protobuf_ShutdownFile_pixhawk_2eproto();

class PointCloudXYZI;
class PointCloudXYZI_PointXYZI;
class PointCloudXYZRGB;
class PointCloudXYZRGB_PointXYZRGB;

// ===================================================================

class PointCloudXYZI_PointXYZI : public ::google::protobuf::Message {
 public:
  PointCloudXYZI_PointXYZI();
  virtual ~PointCloudXYZI_PointXYZI();
  
  PointCloudXYZI_PointXYZI(const PointCloudXYZI_PointXYZI& from);
  
  inline PointCloudXYZI_PointXYZI& operator=(const PointCloudXYZI_PointXYZI& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloudXYZI_PointXYZI& default_instance();
  
  void Swap(PointCloudXYZI_PointXYZI* other);
  
  // implements Message ----------------------------------------------
  
  PointCloudXYZI_PointXYZI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointCloudXYZI_PointXYZI& from);
  void MergeFrom(const PointCloudXYZI_PointXYZI& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // required float intensity = 4;
  inline bool has_intensity() const;
  inline void clear_intensity();
  static const int kIntensityFieldNumber = 4;
  inline float intensity() const;
  inline void set_intensity(float value);
  
  // @@protoc_insertion_point(class_scope:px.PointCloudXYZI.PointXYZI)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_intensity();
  inline void clear_has_intensity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  float intensity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_pixhawk_2eproto();
  friend void protobuf_AssignDesc_pixhawk_2eproto();
  friend void protobuf_ShutdownFile_pixhawk_2eproto();
  
  void InitAsDefaultInstance();
  static PointCloudXYZI_PointXYZI* default_instance_;
};
// -------------------------------------------------------------------

class PointCloudXYZI : public ::google::protobuf::Message {
 public:
  PointCloudXYZI();
  virtual ~PointCloudXYZI();
  
  PointCloudXYZI(const PointCloudXYZI& from);
  
  inline PointCloudXYZI& operator=(const PointCloudXYZI& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloudXYZI& default_instance();
  
  void Swap(PointCloudXYZI* other);
  
  // implements Message ----------------------------------------------
  
  PointCloudXYZI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointCloudXYZI& from);
  void MergeFrom(const PointCloudXYZI& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PointCloudXYZI_PointXYZI PointXYZI;
  
  // accessors -------------------------------------------------------
  
  // repeated .px.PointCloudXYZI.PointXYZI points = 1;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 1;
  inline const ::px::PointCloudXYZI_PointXYZI& points(int index) const;
  inline ::px::PointCloudXYZI_PointXYZI* mutable_points(int index);
  inline ::px::PointCloudXYZI_PointXYZI* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::px::PointCloudXYZI_PointXYZI >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::px::PointCloudXYZI_PointXYZI >*
      mutable_points();
  
  // @@protoc_insertion_point(class_scope:px.PointCloudXYZI)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::px::PointCloudXYZI_PointXYZI > points_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_pixhawk_2eproto();
  friend void protobuf_AssignDesc_pixhawk_2eproto();
  friend void protobuf_ShutdownFile_pixhawk_2eproto();
  
  void InitAsDefaultInstance();
  static PointCloudXYZI* default_instance_;
};
// -------------------------------------------------------------------

class PointCloudXYZRGB_PointXYZRGB : public ::google::protobuf::Message {
 public:
  PointCloudXYZRGB_PointXYZRGB();
  virtual ~PointCloudXYZRGB_PointXYZRGB();
  
  PointCloudXYZRGB_PointXYZRGB(const PointCloudXYZRGB_PointXYZRGB& from);
  
  inline PointCloudXYZRGB_PointXYZRGB& operator=(const PointCloudXYZRGB_PointXYZRGB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloudXYZRGB_PointXYZRGB& default_instance();
  
  void Swap(PointCloudXYZRGB_PointXYZRGB* other);
  
  // implements Message ----------------------------------------------
  
  PointCloudXYZRGB_PointXYZRGB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointCloudXYZRGB_PointXYZRGB& from);
  void MergeFrom(const PointCloudXYZRGB_PointXYZRGB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // required float rgb = 4;
  inline bool has_rgb() const;
  inline void clear_rgb();
  static const int kRgbFieldNumber = 4;
  inline float rgb() const;
  inline void set_rgb(float value);
  
  // @@protoc_insertion_point(class_scope:px.PointCloudXYZRGB.PointXYZRGB)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_rgb();
  inline void clear_has_rgb();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  float rgb_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_pixhawk_2eproto();
  friend void protobuf_AssignDesc_pixhawk_2eproto();
  friend void protobuf_ShutdownFile_pixhawk_2eproto();
  
  void InitAsDefaultInstance();
  static PointCloudXYZRGB_PointXYZRGB* default_instance_;
};
// -------------------------------------------------------------------

class PointCloudXYZRGB : public ::google::protobuf::Message {
 public:
  PointCloudXYZRGB();
  virtual ~PointCloudXYZRGB();
  
  PointCloudXYZRGB(const PointCloudXYZRGB& from);
  
  inline PointCloudXYZRGB& operator=(const PointCloudXYZRGB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloudXYZRGB& default_instance();
  
  void Swap(PointCloudXYZRGB* other);
  
  // implements Message ----------------------------------------------
  
  PointCloudXYZRGB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointCloudXYZRGB& from);
  void MergeFrom(const PointCloudXYZRGB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PointCloudXYZRGB_PointXYZRGB PointXYZRGB;
  
  // accessors -------------------------------------------------------
  
  // repeated .px.PointCloudXYZRGB.PointXYZRGB points = 1;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 1;
  inline const ::px::PointCloudXYZRGB_PointXYZRGB& points(int index) const;
  inline ::px::PointCloudXYZRGB_PointXYZRGB* mutable_points(int index);
  inline ::px::PointCloudXYZRGB_PointXYZRGB* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::px::PointCloudXYZRGB_PointXYZRGB >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::px::PointCloudXYZRGB_PointXYZRGB >*
      mutable_points();
  
  // @@protoc_insertion_point(class_scope:px.PointCloudXYZRGB)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::px::PointCloudXYZRGB_PointXYZRGB > points_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_pixhawk_2eproto();
  friend void protobuf_AssignDesc_pixhawk_2eproto();
  friend void protobuf_ShutdownFile_pixhawk_2eproto();
  
  void InitAsDefaultInstance();
  static PointCloudXYZRGB* default_instance_;
};
// ===================================================================


// ===================================================================

// PointCloudXYZI_PointXYZI

// required float x = 1;
inline bool PointCloudXYZI_PointXYZI::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointCloudXYZI_PointXYZI::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointCloudXYZI_PointXYZI::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointCloudXYZI_PointXYZI::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PointCloudXYZI_PointXYZI::x() const {
  return x_;
}
inline void PointCloudXYZI_PointXYZI::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool PointCloudXYZI_PointXYZI::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointCloudXYZI_PointXYZI::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointCloudXYZI_PointXYZI::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointCloudXYZI_PointXYZI::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PointCloudXYZI_PointXYZI::y() const {
  return y_;
}
inline void PointCloudXYZI_PointXYZI::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool PointCloudXYZI_PointXYZI::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointCloudXYZI_PointXYZI::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointCloudXYZI_PointXYZI::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointCloudXYZI_PointXYZI::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PointCloudXYZI_PointXYZI::z() const {
  return z_;
}
inline void PointCloudXYZI_PointXYZI::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required float intensity = 4;
inline bool PointCloudXYZI_PointXYZI::has_intensity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PointCloudXYZI_PointXYZI::set_has_intensity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PointCloudXYZI_PointXYZI::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PointCloudXYZI_PointXYZI::clear_intensity() {
  intensity_ = 0;
  clear_has_intensity();
}
inline float PointCloudXYZI_PointXYZI::intensity() const {
  return intensity_;
}
inline void PointCloudXYZI_PointXYZI::set_intensity(float value) {
  set_has_intensity();
  intensity_ = value;
}

// -------------------------------------------------------------------

// PointCloudXYZI

// repeated .px.PointCloudXYZI.PointXYZI points = 1;
inline int PointCloudXYZI::points_size() const {
  return points_.size();
}
inline void PointCloudXYZI::clear_points() {
  points_.Clear();
}
inline const ::px::PointCloudXYZI_PointXYZI& PointCloudXYZI::points(int index) const {
  return points_.Get(index);
}
inline ::px::PointCloudXYZI_PointXYZI* PointCloudXYZI::mutable_points(int index) {
  return points_.Mutable(index);
}
inline ::px::PointCloudXYZI_PointXYZI* PointCloudXYZI::add_points() {
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::px::PointCloudXYZI_PointXYZI >&
PointCloudXYZI::points() const {
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::px::PointCloudXYZI_PointXYZI >*
PointCloudXYZI::mutable_points() {
  return &points_;
}

// -------------------------------------------------------------------

// PointCloudXYZRGB_PointXYZRGB

// required float x = 1;
inline bool PointCloudXYZRGB_PointXYZRGB::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointCloudXYZRGB_PointXYZRGB::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointCloudXYZRGB_PointXYZRGB::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointCloudXYZRGB_PointXYZRGB::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PointCloudXYZRGB_PointXYZRGB::x() const {
  return x_;
}
inline void PointCloudXYZRGB_PointXYZRGB::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool PointCloudXYZRGB_PointXYZRGB::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointCloudXYZRGB_PointXYZRGB::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointCloudXYZRGB_PointXYZRGB::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointCloudXYZRGB_PointXYZRGB::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PointCloudXYZRGB_PointXYZRGB::y() const {
  return y_;
}
inline void PointCloudXYZRGB_PointXYZRGB::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool PointCloudXYZRGB_PointXYZRGB::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointCloudXYZRGB_PointXYZRGB::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointCloudXYZRGB_PointXYZRGB::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointCloudXYZRGB_PointXYZRGB::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PointCloudXYZRGB_PointXYZRGB::z() const {
  return z_;
}
inline void PointCloudXYZRGB_PointXYZRGB::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required float rgb = 4;
inline bool PointCloudXYZRGB_PointXYZRGB::has_rgb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PointCloudXYZRGB_PointXYZRGB::set_has_rgb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PointCloudXYZRGB_PointXYZRGB::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PointCloudXYZRGB_PointXYZRGB::clear_rgb() {
  rgb_ = 0;
  clear_has_rgb();
}
inline float PointCloudXYZRGB_PointXYZRGB::rgb() const {
  return rgb_;
}
inline void PointCloudXYZRGB_PointXYZRGB::set_rgb(float value) {
  set_has_rgb();
  rgb_ = value;
}

// -------------------------------------------------------------------

// PointCloudXYZRGB

// repeated .px.PointCloudXYZRGB.PointXYZRGB points = 1;
inline int PointCloudXYZRGB::points_size() const {
  return points_.size();
}
inline void PointCloudXYZRGB::clear_points() {
  points_.Clear();
}
inline const ::px::PointCloudXYZRGB_PointXYZRGB& PointCloudXYZRGB::points(int index) const {
  return points_.Get(index);
}
inline ::px::PointCloudXYZRGB_PointXYZRGB* PointCloudXYZRGB::mutable_points(int index) {
  return points_.Mutable(index);
}
inline ::px::PointCloudXYZRGB_PointXYZRGB* PointCloudXYZRGB::add_points() {
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::px::PointCloudXYZRGB_PointXYZRGB >&
PointCloudXYZRGB::points() const {
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::px::PointCloudXYZRGB_PointXYZRGB >*
PointCloudXYZRGB::mutable_points() {
  return &points_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace px

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pixhawk_2eproto__INCLUDED
