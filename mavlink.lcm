
typedef struct __mavlink_heartbeat_t 
{
	uint8_t type; ///< Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE ENUM)
	uint8_t autopilot; ///< Type of the Autopilot: 0: Generic, 1: PIXHAWK, 2: SLUGS, 3: Ardupilot (up to 15 types), defined in MAV_AUTOPILOT_TYPE ENUM

} mavlink_heartbeat_t;

typedef struct __mavlink_boot_t 
{
	uint32_t version; ///< The onboard software version

} mavlink_boot_t;

typedef struct __mavlink_system_time_t 
{
	uint64_t time_usec; ///< Timestamp of the master clock in microseconds since UNIX epoch.

} mavlink_system_time_t;

typedef struct __mavlink_ping_t 
{
	uint32_t seq; ///< PING sequence
	uint8_t target_system; ///< 0: request ping from all receiving systems, if greater than 0: message is a ping response and number is the system id of the requesting system
	uint8_t target_component; ///< 0: request ping from all receiving components, if greater than 0: message is a ping response and number is the system id of the requesting system
	uint64_t time; ///< Unix timestamp in microseconds

} mavlink_ping_t;

typedef struct __mavlink_action_t 
{
	uint8_t target; ///< The system executing the action
	uint8_t target_component; ///< The component executing the action
	uint8_t action; ///< The action id

} mavlink_action_t;

typedef struct __mavlink_action_ack_t 
{
	uint8_t action; ///< The action id
	uint8_t result; ///< 0: Action DENIED, 1: Action executed

} mavlink_action_ack_t;

typedef struct __mavlink_set_mode_t 
{
	uint8_t target; ///< The system setting the mode
	uint8_t mode; ///< The new mode

} mavlink_set_mode_t;

typedef struct __mavlink_set_nav_mode_t 
{
	uint8_t target; ///< The system setting the mode
	uint8_t nav_mode; ///< The new navigation mode

} mavlink_set_nav_mode_t;

typedef struct __mavlink_param_request_read_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID
	int8_t param_id[15]; ///< Onboard parameter id
	uint16_t param_index; ///< Parameter index

} mavlink_param_request_read_t;

typedef struct __mavlink_param_request_list_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID

} mavlink_param_request_list_t;

typedef struct __mavlink_param_value_t 
{
	int8_t param_id[15]; ///< Onboard parameter id
	float param_value; ///< Onboard parameter value
	uint16_t param_count; ///< Total number of onboard parameters
	uint16_t param_index; ///< Index of this onboard parameter

} mavlink_param_value_t;

typedef struct __mavlink_param_set_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID
	int8_t param_id[15]; ///< Onboard parameter id
	float param_value; ///< Onboard parameter value

} mavlink_param_set_t;

typedef struct __mavlink_raw_imu_t 
{
	uint64_t usec; ///< Timestamp (microseconds since UNIX epoch)
	int16_t xacc; ///< X acceleration (mg raw)
	int16_t yacc; ///< Y acceleration (mg raw)
	int16_t zacc; ///< Z acceleration (mg raw)
	uint16_t xgyro; ///< Angular speed around X axis (adc units)
	uint16_t ygyro; ///< Angular speed around Y axis (adc units)
	uint16_t zgyro; ///< Angular speed around Z axis (adc units)
	int16_t xmag; ///< X Magnetic field (milli tesla)
	int16_t ymag; ///< Y Magnetic field (milli tesla)
	int16_t zmag; ///< Z Magnetic field (milli tesla)

} mavlink_raw_imu_t;

typedef struct __mavlink_raw_pressure_t 
{
	uint64_t usec; ///< Timestamp (microseconds since UNIX epoch)
	int32_t press_abs; ///< Absolute pressure (hectopascal)
	int32_t press_diff1; ///< Differential pressure 1 (hectopascal)
	int32_t press_diff2; ///< Differential pressure 2 (hectopascal)

} mavlink_raw_pressure_t;

typedef struct __mavlink_attitude_t 
{
	uint64_t usec; ///< Timestamp (microseconds)
	float roll; ///< Roll angle (rad)
	float pitch; ///< Pitch angle (rad)
	float yaw; ///< Yaw angle (rad)
	float rollspeed; ///< Roll angular speed (rad/s)
	float pitchspeed; ///< Pitch angular speed (rad/s)
	float yawspeed; ///< Yaw angular speed (rad/s)

} mavlink_attitude_t;

typedef struct __mavlink_local_position_t 
{
	uint64_t usec; ///< Timestamp (microseconds since unix epoch)
	float x; ///< X Position
	float y; ///< Y Position
	float z; ///< Z Position
	float vx; ///< X Speed
	float vy; ///< Y Speed
	float vz; ///< Z Speed

} mavlink_local_position_t;

typedef struct __mavlink_gps_raw_t 
{
	uint64_t usec; ///< Timestamp (microseconds since unix epoch)
	uint8_t fix_type; ///< 0-1: no fix, 2: 2D fix, 3: 3D fix
	float lat; ///< X Position
	float lon; ///< Y Position
	float alt; ///< Z Position in meters
	float eph; ///< Uncertainty in meters of latitude
	float epv; ///< Uncertainty in meters of longitude
	float v; ///< Overall speed
	float hdg; ///< Heading, in FIXME

} mavlink_gps_raw_t;

typedef struct __mavlink_gps_status_t 
{
	uint8_t satellites_visible; ///< Number of satellites visible
	int8_t satellite_prn[20]; ///< Global satellite ID
	int8_t satellite_used[20]; ///< 0: Satellite not used, 1: used for localization
	int8_t satellite_elevation[20]; ///< Elevation (0: right on top of receiver, 90: on the horizon) of satellite
	int8_t satellite_azimuth[20]; ///< Direction of satellite, 0: 0 deg, 255: 360 deg.
	int8_t satellite_snr[20]; ///< Signal to noise ratio of satellite

} mavlink_gps_status_t;

typedef struct __mavlink_global_position_t 
{
	uint64_t usec; ///< Timestamp (microseconds since unix epoch)
	float lat; ///< X Position
	float lon; ///< Y Position
	float alt; ///< Z Position
	float vx; ///< X Speed
	float vy; ///< Y Speed
	float vz; ///< Z Speed

} mavlink_global_position_t;

typedef struct __mavlink_sys_status_t 
{
	uint8_t mode; ///< System mode, see MAV_MODE ENUM in mavlink/include/mavlink_types.h
	uint8_t nav_mode; ///< Navigation mode, see MAV_NAV_MODE ENUM
	uint8_t status; ///< System status flag, see MAV_STATUS ENUM
	uint16_t vbat; ///< Battery voltage, in millivolts (1 = 1 millivolt)
	uint8_t motor_block; ///< Motor block status flag, 0: Motors can be switched on (and could be either off or on), 1: Mechanical motor block switch is on, motors cannot be switched on (and are definitely off)
	uint16_t packet_drop; ///< Dropped packets (packets that were corrupted on reception on the MAV)

} mavlink_sys_status_t;

typedef struct __mavlink_rc_channels_raw_t 
{
	uint16_t chan1; ///< RC channel 1 value, in microseconds
	uint16_t chan2; ///< RC channel 2 value, in microseconds
	uint16_t chan3; ///< RC channel 3 value, in microseconds
	uint16_t chan4; ///< RC channel 4 value, in microseconds
	uint16_t chan5; ///< RC channel 5 value, in microseconds
	uint16_t chan6; ///< RC channel 6 value, in microseconds
	uint16_t chan7; ///< RC channel 7 value, in microseconds
	uint16_t chan8; ///< RC channel 8 value, in microseconds

} mavlink_rc_channels_raw_t;

typedef struct __mavlink_waypoint_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID
	uint16_t seq; ///< Sequence
	uint8_t type; ///< 0: global (GPS), 1: local, 2: global orbit, 3: local orbit
	float orbit; ///< Orbit to circle around the waypoint, in meters. Set to 0 to fly straight through the waypoint
	uint8_t orbit_direction; ///< Direction of the orbit circling: 0: clockwise, 1: counter-clockwise
	float param1; ///< For waypoints of type 0 and 1: Radius in which the waypoint is accepted as reached, in meters
	float param2; ///< For waypoints of type 0 and 1: Time that the MAV should stay inside the orbit before advancing, in milliseconds
	uint8_t current; ///< false:0, true:1
	float x; ///< local: x position, global: longitude
	float y; ///< y position: global: latitude
	float z; ///< z position: global: altitude
	float yaw; ///< yaw orientation in radians, 0 = NORTH
	uint8_t autocontinue; ///< autocontinue to next wp

} mavlink_waypoint_t;

typedef struct __mavlink_waypoint_request_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID
	uint16_t seq; ///< Sequence

} mavlink_waypoint_request_t;

typedef struct __mavlink_waypoint_set_current_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID
	uint16_t seq; ///< Sequence

} mavlink_waypoint_set_current_t;

typedef struct __mavlink_waypoint_current_t 
{
	uint16_t seq; ///< Sequence

} mavlink_waypoint_current_t;

typedef struct __mavlink_waypoint_request_list_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID

} mavlink_waypoint_request_list_t;

typedef struct __mavlink_waypoint_count_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID
	uint16_t count; ///< Number of Waypoints in the Sequence

} mavlink_waypoint_count_t;

typedef struct __mavlink_waypoint_clear_all_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID

} mavlink_waypoint_clear_all_t;

typedef struct __mavlink_waypoint_reached_t 
{
	uint16_t seq; ///< Sequence

} mavlink_waypoint_reached_t;

typedef struct __mavlink_waypoint_ack_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID
	uint8_t type; ///< 0: OK, 1: Error

} mavlink_waypoint_ack_t;

typedef struct __mavlink_waypoint_set_global_reference_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID
	float global_x; ///< global x position
	float global_y; ///< global y position
	float global_z; ///< global z position
	float global_yaw; ///< global yaw orientation in radians, 0 = NORTH
	float local_x; ///< local x position that matches the global x position
	float local_y; ///< local y position that matches the global y position
	float local_z; ///< local z position that matches the global z position
	float local_yaw; ///< local yaw that matches the global yaw orientation

} mavlink_waypoint_set_global_reference_t;

typedef struct __mavlink_local_position_setpoint_set_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID
	float x; ///< x position 1
	float y; ///< y position 1
	float z; ///< z position 1
	float yaw; ///< x position 2

} mavlink_local_position_setpoint_set_t;

typedef struct __mavlink_local_position_setpoint_t 
{
	float x; ///< x position 1
	float y; ///< y position 1
	float z; ///< z position 1
	float yaw; ///< x position 2

} mavlink_local_position_setpoint_t;

typedef struct __mavlink_attitude_controller_output_t 
{
	uint8_t enabled; ///< 1: enabled, 0: disabled
	int8_t roll; ///< Attitude roll: -128: -100%, 127: +100%
	int8_t pitch; ///< Attitude pitch: -128: -100%, 127: +100%
	int8_t yaw; ///< Attitude yaw: -128: -100%, 127: +100%
	int8_t thrust; ///< Attitude thrust: -128: -100%, 127: +100%

} mavlink_attitude_controller_output_t;

typedef struct __mavlink_position_controller_output_t 
{
	uint8_t enabled; ///< 1: enabled, 0: disabled
	int8_t x; ///< Position x: -128: -100%, 127: +100%
	int8_t y; ///< Position y: -128: -100%, 127: +100%
	int8_t z; ///< Position z: -128: -100%, 127: +100%
	int8_t yaw; ///< Position yaw: -128: -100%, 127: +100%

} mavlink_position_controller_output_t;

typedef struct __mavlink_statustext_t 
{
	uint8_t severity; ///< Severity of status, 0 = info message, 255 = critical fault
	int8_t text[50]; ///< Status text message, without null termination character

} mavlink_statustext_t;

typedef struct __mavlink_debug_t 
{
	uint8_t ind; ///< index of debug variable
	float value; ///< DEBUG value

} mavlink_debug_t;

typedef struct __mavlink_set_altitude_t 
{
	uint8_t target; ///< The system setting the altitude
	uint32_t mode; ///< The new altitude in meters

} mavlink_set_altitude_t;

typedef struct __mavlink_request_data_stream_t 
{
	uint8_t target_system; ///< The target requested to send the message stream.
	uint8_t target_component; ///< The target requested to send the message stream.
	uint8_t req_stream_id; ///< The ID of the requested message type
	uint16_t req_message_rate; ///< The requested interval between two messages of this type
	uint8_t start_stop; ///< 1 to start sending, 0 to stop sending.

} mavlink_request_data_stream_t;

typedef struct __mavlink_request_dynamic_gyro_calibration_t 
{
	uint8_t target_system; ///< The system which should auto-calibrate
	uint8_t target_component; ///< The system component which should auto-calibrate
	float mode; ///< The current ground-truth rpm
	uint8_t axis; ///< The axis to calibrate: 0 roll, 1 pitch, 2 yaw
	uint16_t time; ///< The time to average over in ms

} mavlink_request_dynamic_gyro_calibration_t;

typedef struct __mavlink_request_static_calibration_t 
{
	uint8_t target_system; ///< The system which should auto-calibrate
	uint8_t target_component; ///< The system component which should auto-calibrate
	uint16_t time; ///< The time to average over in ms

} mavlink_request_static_calibration_t;

typedef struct __mavlink_manual_control_t 
{
	uint8_t target; ///< The system to be controlled
	float roll; ///< roll
	float pitch; ///< pitch
	float yaw; ///< yaw
	float thrust; ///< thrust
	uint8_t roll_manual; ///< roll control enabled auto:0, manual:1
	uint8_t pitch_manual; ///< pitch auto:0, manual:1
	uint8_t yaw_manual; ///< yaw auto:0, manual:1
	uint8_t thrust_manual; ///< thrust auto:0, manual:1

} mavlink_manual_control_t;

typedef struct __mavlink_attitude_control_t 
{
	uint8_t target; ///< The system to be controlled
	float roll; ///< roll
	float pitch; ///< pitch
	float yaw; ///< yaw
	float thrust; ///< thrust
	uint8_t roll_manual; ///< roll control enabled auto:0, manual:1
	uint8_t pitch_manual; ///< pitch auto:0, manual:1
	uint8_t yaw_manual; ///< yaw auto:0, manual:1
	uint8_t thrust_manual; ///< thrust auto:0, manual:1

} mavlink_attitude_control_t;

typedef struct __mavlink_debug_vect_t 
{
	int8_t name[10]; ///< Name
	uint64_t usec; ///< Timestamp
	float x; ///< x
	float y; ///< y
	float z; ///< z

} mavlink_debug_vect_t;

typedef struct __mavlink_set_cam_shutter_t 
{
	uint8_t cam_no; ///< Camera id
	uint8_t cam_mode; ///< Camera mode: 0 = auto, 1 = manual
	uint8_t trigger_pin; ///< Trigger pin, 0-3 for PtGrey FireFly
	uint16_t interval; ///< Shutter interval, in microseconds
	uint16_t exposure; ///< Exposure time, in microseconds
	float gain; ///< Camera gain

} mavlink_set_cam_shutter_t;

typedef struct __mavlink_image_triggered_t 
{
	uint64_t timestamp; ///< Timestamp
	uint32_t seq; ///< IMU seq
	float roll; ///< Roll angle in rad
	float pitch; ///< Pitch angle in rad

} mavlink_image_triggered_t;

typedef struct __mavlink_image_trigger_control_t 
{
	uint8_t enable; ///< 0 to disable, 1 to enable

} mavlink_image_trigger_control_t;

typedef struct __mavlink_image_available_t 
{
	uint64_t cam_id; ///< Camera id
	uint8_t cam_no; ///< Camera # (starts with 0)
	uint64_t timestamp; ///< Timestamp
	uint64_t valid_until; ///< Until which timestamp this buffer will stay valid
	uint32_t img_seq; ///< The image sequence number
	uint32_t img_buf_index; ///< Position of the image in the buffer, starts with 0
	uint16_t width; ///< Image width
	uint16_t height; ///< Image height
	uint16_t depth; ///< Image depth
	uint8_t channels; ///< Image channels
	uint32_t key; ///< Shared memory area key
	uint32_t exposure; ///< Exposure time, in microseconds
	float gain; ///< Camera gain
	float roll; ///< Roll angle in rad
	float pitch; ///< Pitch angle in rad

} mavlink_image_available_t;

typedef struct __mavlink_vision_position_estimate_t 
{
	uint64_t usec; ///< Timestamp (milliseconds)
	float x; ///< Global X position
	float y; ///< Global Y position
	float z; ///< Global Z position
	float roll; ///< Roll angle in rad
	float pitch; ///< Pitch angle in rad
	float yaw; ///< Yaw angle in rad

} mavlink_vision_position_estimate_t;

typedef struct __mavlink_position_control_setpoint_set_t 
{
	uint8_t target_system; ///< System ID
	uint8_t target_component; ///< Component ID
	uint16_t id; ///< ID of waypoint, 0 for plain position
	float x; ///< x position
	float y; ///< y position
	float z; ///< z position
	float yaw; ///< yaw orientation in radians, 0 = NORTH

} mavlink_position_control_setpoint_set_t;

typedef struct __mavlink_position_control_setpoint_t 
{
	uint16_t id; ///< ID of waypoint, 0 for plain position
	float x; ///< x position
	float y; ///< y position
	float z; ///< z position
	float yaw; ///< yaw orientation in radians, 0 = NORTH

} mavlink_position_control_setpoint_t;

typedef struct __mavlink_marker_t 
{
	uint16_t id; ///< ID
	float x; ///< x position
	float y; ///< y position
	float z; ///< z position
	float roll; ///< roll orientation
	float pitch; ///< pitch orientation
	float yaw; ///< yaw orientation

} mavlink_marker_t;

typedef struct __mavlink_raw_aux_t 
{
	uint16_t adc1; ///< ADC1 (J405 ADC3, LPC2148 AD0.6)
	uint16_t adc2; ///< ADC2 (J405 ADC5, LPC2148 AD0.2)
	uint16_t adc3; ///< ADC3 (J405 ADC6, LPC2148 AD0.1)
	uint16_t adc4; ///< ADC4 (J405 ADC7, LPC2148 AD1.3)
	uint16_t vbat; ///< Battery voltage
	int16_t temp; ///< Temperature (degrees celcius)
	int32_t baro; ///< Barometric pressure (hecto Pascal)

} mavlink_raw_aux_t;

typedef struct __mavlink_aux_status_t 
{
	uint16_t load; ///< Maximum usage in percent of the mainloop time, (0%: 0, 100%: 1000) should be always below 1000
	uint16_t i2c0_err_count; ///< Number of I2C errors since startup
	uint16_t i2c1_err_count; ///< Number of I2C errors since startup
	uint16_t spi0_err_count; ///< Number of I2C errors since startup
	uint16_t spi1_err_count; ///< Number of I2C errors since startup
	uint16_t uart_total_err_count; ///< Number of I2C errors since startup

} mavlink_aux_status_t;

typedef struct __mavlink_control_status_t 
{
	uint8_t position_fix; ///< Position fix: 0: lost, 2: 2D position fix, 3: 3D position fix 
	uint8_t vision_fix; ///< Vision position fix: 0: lost, 1: 2D local position hold, 2: 2D global position fix, 3: 3D global position fix 
	uint8_t gps_fix; ///< GPS position fix: 0: no reception, 1: Minimum 1 satellite, but no position fix, 2: 2D position fix, 3: 3D position fix 
	uint8_t control_att; ///< 0: Attitude control disabled, 1: enabled
	uint8_t control_pos_xy; ///< 0: X, Y position control disabled, 1: enabled
	uint8_t control_pos_z; ///< 0: Z position control disabled, 1: enabled
	uint8_t control_pos_yaw; ///< 0: Yaw angle control disabled, 1: enabled

} mavlink_control_status_t;

typedef struct __mavlink_watchdog_heartbeat_t 
{
	uint16_t watchdog_id; ///< Watchdog ID
	uint16_t process_count; ///< Number of processes

} mavlink_watchdog_heartbeat_t;

typedef struct __mavlink_watchdog_process_info_t 
{
	uint16_t watchdog_id; ///< Watchdog ID
	uint16_t process_id; ///< Process ID
	int8_t name[100]; ///< Process name
	int8_t arguments[147]; ///< Process arguments
	int32_t timeout; ///< Timeout (seconds)

} mavlink_watchdog_process_info_t;

typedef struct __mavlink_watchdog_process_status_t 
{
	uint16_t watchdog_id; ///< Watchdog ID
	uint16_t process_id; ///< Process ID
	uint8_t state; ///< Is running / finished / suspended / crashed
	uint8_t muted; ///< Is muted
	int32_t pid; ///< PID
	uint16_t crashes; ///< Number of crashes

} mavlink_watchdog_process_status_t;

typedef struct __mavlink_watchdog_command_t 
{
	uint8_t target_system_id; ///< Target system ID
	uint16_t watchdog_id; ///< Watchdog ID
	uint16_t process_id; ///< Process ID
	uint8_t command_id; ///< Command ID

} mavlink_watchdog_command_t;

typedef struct __mavlink_pattern_detected_t 
{
	uint8_t type; ///< 0: Pattern, 1: Letter
	float confidence; ///< Confidence of detection
	int8_t file[100]; ///< Pattern file name
	uint8_t detected; ///< Accepted as true detection, 0 no, 1 yes

} mavlink_pattern_detected_t;
