
typedef struct __heartbeat_t 
{
	uint8_t type; ///< Type of the MAV (quadrotor, helicopter, etc.)

} heartbeat_t;

typedef struct __boot_t 
{
	uint32_t version; ///< The onboard software version

} boot_t;

typedef struct __action_t 
{
	uint8_t target; ///< The system executing the action
	uint8_t action; ///< The action id

} action_t;

typedef struct __set_mode_t 
{
	uint8_t target; ///< The system setting the mode
	uint8_t mode; ///< The new mode

} set_mode_t;

typedef struct __set_altitude_t 
{
	uint8_t target; ///< The system setting the altitude
	uint32_t mode; ///< The new altitude in meters

} set_altitude_t;

typedef struct __manual_control_t 
{
	uint8_t target; ///< The system to be controlled
	float roll; ///< roll
	float pitch; ///< pitch
	float yaw; ///< yaw
	float thrust; ///< thrust
	uint8_t roll_manual; ///< roll control enabled auto:0, manual:1
	uint8_t pitch_manual; ///< pitch auto:0, manual:1
	uint8_t yaw_manual; ///< yaw auto:0, manual:1
	uint8_t thrust_manual; ///< thrust auto:0, manual:1

} manual_control_t;

typedef struct __attitude_control_t 
{
	uint8_t target; ///< The system to be controlled
	float roll; ///< roll
	float pitch; ///< pitch
	float yaw; ///< yaw
	float thrust; ///< thrust
	uint8_t roll_manual; ///< roll control enabled auto:0, manual:1
	uint8_t pitch_manual; ///< pitch auto:0, manual:1
	uint8_t yaw_manual; ///< yaw auto:0, manual:1
	uint8_t thrust_manual; ///< thrust auto:0, manual:1

} attitude_control_t;

typedef struct __raw_imu_t 
{
	uint64_t msec; ///< Timestamp (milliseconds)
	int16_t xacc; ///< X acceleration (mg raw)
	int16_t yacc; ///< Y acceleration (mg raw)
	int16_t zacc; ///< Z acceleration (mg raw)
	uint16_t xgyro; ///< Angular speed around X axis (adc units)
	uint16_t ygyro; ///< Angular speed around Y axis (adc units)
	uint16_t zgyro; ///< Angular speed around Z axis (adc units)
	int16_t xmag; ///< X Magnetic field (milli tesla)
	int16_t ymag; ///< Y Magnetic field (milli tesla)
	int16_t zmag; ///< Z Magnetic field (milli tesla)

} raw_imu_t;

typedef struct __raw_aux_t 
{
	uint16_t adc1; ///< ADC1 (J405 ADC3, LPC2148 AD0.6)
	uint16_t adc2; ///< ADC2 (J405 ADC5, LPC2148 AD0.2)
	uint16_t adc3; ///< ADC3 (J405 ADC6, LPC2148 AD0.1)
	uint16_t adc4; ///< ADC4 (J405 ADC7, LPC2148 AD1.3)
	uint16_t vbat; ///< Battery voltage
	int16_t temp; ///< Temperature (degrees celcius)
	int16_t baro; ///< Barometric pressure (hecto Pascal)

} raw_aux_t;

typedef struct __sys_status_t 
{
	uint8_t mode; ///< System mode
	uint8_t status; ///< System status flag
	uint16_t vbat; ///< Battery voltage
	uint8_t motor_block; ///< Motor block status flag
	uint16_t packet_drop; ///< Dropped packets

} sys_status_t;

typedef struct __aux_status_t 
{
	uint16_t load; ///< Maximum usage in percent of the mainloop time, should be always below 100

} aux_status_t;

typedef struct __set_cam_shutter_t 
{
	uint8_t cam_no; ///< Camera id
	uint8_t cam_mode; ///< Camera mode: 0 = auto, 1 = manual
	uint8_t trigger_pin; ///< Trigger pin, 0-3 for PtGrey FireFly
	uint16_t interval; ///< Shutter interval, in microseconds
	uint16_t exposure; ///< Exposure time, in microseconds
	float gain; ///< Camera gain

} set_cam_shutter_t;

typedef struct __image_captured_t 
{
	uint16_t exposure; ///< Exposure time, in microseconds
	float gain; ///< Camera gain
	uint32_t timestamp; ///< Timestamp

} image_captured_t;

typedef struct __image_available_t 
{
	uint64_t cam_id; ///< Camera id
	uint8_t cam_no; ///< Camera # (starts with 0)
	uint32_t timestamp; ///< Timestamp
	uint32_t img_seq; ///< The image sequence number
	uint32_t img_buf_index; ///< Position of the image in the buffer, starts with 0
	uint16_t width; ///< Image width
	uint16_t height; ///< Image height
	uint16_t depth; ///< Image depth
	uint8_t channels; ///< Image channels
	int32_t key; ///< Shared memory area key
	uint16_t exposure; ///< Exposure time, in microseconds
	float gain; ///< Camera gain

} image_available_t;

typedef struct __param_request_read_t 
{
	uint16_t param_id; ///< Camera id

} param_request_read_t;

typedef struct __param_value_t 
{
	uint16_t param_id; ///< Onboard parameter id
	float param_value; ///< Onboard parameter value

} param_value_t;

typedef struct __param_write_t 
{
	uint16_t param_id; ///< Onboard parameter id
	float param_value; ///< Onboard parameter value

} param_write_t;

typedef struct __attitude_t 
{
	uint64_t msec; ///< Timestamp (milliseconds)
	float roll; ///< Roll angle (rad)
	float pitch; ///< Pitch angle (rad)
	float yaw; ///< Yaw angle (rad)
	float rollspeed; ///< Roll angular speed (rad/s)
	float pitchspeed; ///< Pitch angular speed (rad/s)
	float yawspeed; ///< Yaw angular speed (rad/s)

} attitude_t;

typedef struct __position_t 
{
	uint64_t msec; ///< Timestamp (milliseconds)
	float x; ///< X Position
	float y; ///< Y Position
	float z; ///< Z Position
	float vx; ///< X Speed
	float vy; ///< Y Speed
	float vz; ///< Z Speed

} position_t;

typedef struct __pattern_detected_t 
{
	float confidence; ///< Confidence of detection
	int8_t file[100]; ///< Pattern file name
	uint8_t detected; ///< Accepted as true detection, 0 no, 1 yes

} pattern_detected_t;

typedef struct __statustext_t 
{
	uint8_t severity; ///< Severity of status, 0 = info message, 255 = critical fault
	int8_t text[254]; ///< Status text message, without null termination character

} statustext_t;

typedef struct __debug_t 
{
	uint8_t ind; ///< index of debug variable
	float value; ///< DEBUG value

} debug_t;
